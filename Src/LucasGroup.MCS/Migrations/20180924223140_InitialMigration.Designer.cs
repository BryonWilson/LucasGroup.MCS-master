// <auto-generated />
using System;
using LucasGroup.MCS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LucasGroup.MCS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180924223140_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LucasGroup.MCS.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<int>("CountryId");

                    b.Property<string>("State");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("UserSettingsId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserSettingsId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("PracticeGroup");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new { Id = 1, Name = "Military - Atlanta MilTech", Number = "02.44.01", PracticeGroup = "Military" },
                        new { Id = 2, Name = "Military - Atlanta", Number = "02.45.01", PracticeGroup = "Military" },
                        new { Id = 3, Name = "Military - Irvine", Number = "02.46.01", PracticeGroup = "Military" },
                        new { Id = 4, Name = "Military - Washington DC", Number = "02.48.01", PracticeGroup = "Military" },
                        new { Id = 5, Name = "Military - Dalas", Number = "02.70.01", PracticeGroup = "Military" },
                        new { Id = 6, Name = "Information Technology - Tampa", Number = "07.61.01", PracticeGroup = "Information Technology" },
                        new { Id = 7, Name = "Information Technology - San Diego", Number = "07.67.01", PracticeGroup = "Information Technology" },
                        new { Id = 8, Name = "Information Technology - Houston", Number = "07.95.01", PracticeGroup = "Information Technology" }
                    );
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BullhornCandidateId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Candidates");

                    b.HasData(
                        new { Id = 1, BullhornCandidateId = 6255500, FirstName = "Erin", LastName = "Soza" },
                        new { Id = 2, BullhornCandidateId = 6254196, FirstName = "Christopher", LastName = "Worthy" },
                        new { Id = 3, BullhornCandidateId = 6255580, FirstName = "Roger", LastName = "St Clair" },
                        new { Id = 4, BullhornCandidateId = 6255075, FirstName = "Kent", LastName = "Gonser" }
                    );
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountRepId");

                    b.Property<string>("BullhornClientId");

                    b.Property<string>("Fax");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<int?>("DefaultDurationMinutes");

                    b.Property<string>("DefaultStartTime");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDateTime");

                    b.HasKey("Id");

                    b.ToTable("Conferences");

                    b.HasData(
                        new { Id = 1, BranchId = 1, DefaultDurationMinutes = 45, DefaultStartTime = "08:00", EndDateTime = new DateTime(2018, 5, 18, 20, 30, 0, 0, DateTimeKind.Utc), Name = "Conference 1", StartDateTime = new DateTime(2018, 5, 17, 13, 30, 0, 0, DateTimeKind.Utc) },
                        new { Id = 2, BranchId = 1, DefaultDurationMinutes = 45, DefaultStartTime = "08:00", EndDateTime = new DateTime(2018, 5, 21, 19, 30, 0, 0, DateTimeKind.Utc), Name = "Conference 2", StartDateTime = new DateTime(2018, 5, 20, 12, 30, 0, 0, DateTimeKind.Utc) },
                        new { Id = 3, BranchId = 1, DefaultDurationMinutes = 45, DefaultStartTime = "08:00", EndDateTime = new DateTime(2018, 5, 24, 20, 30, 0, 0, DateTimeKind.Utc), Name = "Conference 3", StartDateTime = new DateTime(2018, 5, 23, 13, 30, 0, 0, DateTimeKind.Utc) },
                        new { Id = 4, BranchId = 1, DefaultDurationMinutes = 45, DefaultStartTime = "08:00", EndDateTime = new DateTime(2018, 5, 29, 19, 30, 0, 0, DateTimeKind.Utc), Name = "Conference 4", StartDateTime = new DateTime(2018, 5, 28, 12, 30, 0, 0, DateTimeKind.Utc) },
                        new { Id = 5, BranchId = 1, DefaultDurationMinutes = 45, DefaultStartTime = "08:00", EndDateTime = new DateTime(2018, 6, 1, 20, 30, 0, 0, DateTimeKind.Utc), Name = "Conference 5", StartDateTime = new DateTime(2018, 5, 31, 13, 30, 0, 0, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.ConferenceCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId");

                    b.Property<int?>("ConferenceId");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("ConferenceCandidates");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BullhornContactId");

                    b.Property<int?>("ClientId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.JobOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<string>("BullhornJobOrderId");

                    b.Property<int?>("ClientId");

                    b.Property<int?>("ConferenceId");

                    b.Property<string>("Description");

                    b.Property<string>("Position");

                    b.Property<string>("Requirements");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("JobOrders");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.ScheduleMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId");

                    b.Property<double>("Duration");

                    b.Property<string>("InterviewerFirstName");

                    b.Property<string>("InterviewerLastName");

                    b.Property<int?>("JobOrderId");

                    b.Property<int>("OwnerID");

                    b.Property<DateTime?>("TimeSlot");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobOrderId");

                    b.ToTable("ScheduleMatches");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<int>("BullhornUserId");

                    b.Property<string>("BullhornUsername");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.ApplicationUser", b =>
                {
                    b.HasOne("LucasGroup.MCS.Models.UserSettings", "UserSettings")
                        .WithMany()
                        .HasForeignKey("UserSettingsId");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.ConferenceCandidate", b =>
                {
                    b.HasOne("LucasGroup.MCS.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("LucasGroup.MCS.Models.Conference")
                        .WithMany("Candidates")
                        .HasForeignKey("ConferenceId");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.Contact", b =>
                {
                    b.HasOne("LucasGroup.MCS.Models.Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.JobOrder", b =>
                {
                    b.HasOne("LucasGroup.MCS.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("LucasGroup.MCS.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("LucasGroup.MCS.Models.Conference")
                        .WithMany("JobOrders")
                        .HasForeignKey("ConferenceId");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.ScheduleMatch", b =>
                {
                    b.HasOne("LucasGroup.MCS.Models.ConferenceCandidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("LucasGroup.MCS.Models.JobOrder")
                        .WithMany("ScheduleMatches")
                        .HasForeignKey("JobOrderId");
                });

            modelBuilder.Entity("LucasGroup.MCS.Models.UserSettings", b =>
                {
                    b.HasOne("LucasGroup.MCS.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LucasGroup.MCS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LucasGroup.MCS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LucasGroup.MCS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LucasGroup.MCS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
